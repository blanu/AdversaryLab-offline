AdversaryLab-offline is a set of tools for analyzing network capture (.pcap) files and creating optimized simulated adversaries.
It is a fork of AdversaryLab, which is an online service that provides similar functionality.

Step 1 - Generating Pcaps

You can use a tool such as tcpdump or Wireshark to capture network traffic data and save it as a pcap file. When using Wireshark, make sure to export
as tcpdump-compatible pcap files and not "pcapng".

For the pcap files to be able to be processed by Adversary Lab, you should only have one time of traffic in each pcap file. For instance, if you
are testing Tor vs HTTPS then you should have all of your Tor data in one pcap file and all of your HTTPS data in another one. Don't worry about
extraneous traffic that gets captured at the same time. Adversary Lab will filter this out.

You will want to generate as many TCP connections using the protocol you want to test as possible as each connection is treated as a distinct
sample. For instance, Tor uses long-lived connections which persist if the same Tor session is used. In order to get a good amount of test data,
Tor will therefore need to be stopped and started multiple times in order to create several Tor sessions. Otherwise all the Tor traffic will
just be counted as one data point, which is not as useful for training.

You will also need your protocols to operate on fixed, distinct ports. So in the case of Tor vs HTTPS, your Tor connetions should always use
the same port. Your HTTPS connections should all use a different port. This is because the training process does not yet know how to distinguish
traffic of different protocols. The port is used to distinguish traffic of different protocols.

Pcap files are organized in a directory structure based on dataset and protocol. The dataset is just for convenience in case you have different
datasets that you want to analyze. For instance, if you had a pcap of HTTPS data gathered from your office network called "test-data.pcap",
you could place it in "pcaps/Office/HTTPS/test-data.pcap".

Step 2 - Processing Pcaps for Statistical Data

First edit stats-incremental.py and add your protocols ports to the portTable dictionary. For instance, if you are analyzing HTTPS you might add
'HTTPS': 443 to the table.

Run the following: python stats-incremental.py [dataset] [protocol]
For instance, "python stats-incremental.py Office HTTPS"

This will analyze just the data from the given dataset and for the given protocol. The result will be statistical summaries of the pcaps. A
statistical summary of each TCP connection will be written to the conns/ directory. A rolled up summary of all of the connections in the dataset
will be written to the datasets/ directory. A rolled up summary of all connections across all datasets for the protocol will be written to the
protocols/ directory.

Step 3 - Processing Pcaps for Byte Sequence Data

First edit first-incremental.py and add your protocols ports to the portTable dictionary. For instance, if you are analyzing HTTPS you might add
'HTTPS': 443 to the table.

Run the following: python first-incremental.py [dataset] [protocol] [pcap] [port]
For instance, "python first-incremental.py Office HTTPS test-data.pcap 443"

Run the following: python seqs.py

This creates a map of the byte sequence probabilities.

Run: python extract.py

This extracts the high probability byte sequences from the byte sequence map.

Step 4 - Training an Adversary Model

Make a directory for your adversary: mkdir adversaries/Tor-HTTPS
Symlink the protocols for your model:
  cd adversaries/Tor-HTTPS
  ln -s ../../protocols/Tor positive
  ln -s ../../protocols/HTTPS negative
Create a features file: cp ../../features.all features

Run: python train-incremental.py [adversary]
For instance, "python train-incremental.py Tor-HTTPS"

This will use machine learning to create a simulated adversary that can distinguish between the two protocols. The results will be written to
adversaries/Tor-HTTPS/model.

Step 5 - Merging Statistical and Byte Sequence Data

Run: python mergeseqmodels.py [adversary]
For instance, "python mergeseqmodels.py Tor-HTTPS"

This will load the adversary model file, add in the byte sequence matching information, and write out a modified model file.

Step 6 - Preliminary Testing

The next step is to test the model and determine which features are good discriminators between the two protocols.

Run: python test2-incremental.py [adversary]
For instance, "python test2-incremental.py Tor-HTTPS"

This will run the machine learning model against the training data to see how well it predicts the training data. Since this is the same data
that was used to train the model, the accuracy of prediction should be very high. If the accuracy is not high, then this indicates that the
feature being tested is not a good discriminator between the protocols.

The output will be written to the tests/ directory.
